Databank VM Setup
------------------------------------------------------------------------------------------------------
I. Virtual machine details
------------------------------------------------------------------------------------------------------
Ubuntu 11.10 server i386
512MB RAM
8GB Harddrive (all of hard disk not allocated at the time of creation)
Network: NAT
1 processor

hostname: databank
Partition disk � guided � use entire disk and set up LVM
Full name: Databank Admin
username: demoSystemUser
password: xxxxxxx
NO encryption of home dir
No proxy
No automatic updates
No predefined software
Install Grub boot loader to master boot record

------------------------------------------------------------------------------------------------------
II. Packages to be Installed
------------------------------------------------------------------------------------------------------
    sudo apt-get install build-essential
    sudo apt-get update
    sudo apt-get install openssh-server
    sudo apt-get install openjdk-6-jre
    sudo apt-get install python-dev
    sudo apt-get install curl
    sudo apt-get install links2
    sudo apt-get install unzip
    
    sudo apt-get install apache2
    sudo apt-get install apache2-utils
    sudo apt-get install libapache2-mod-wsgi    
    
    sudo apt-get install python-setuptools
    sudo apt-get install python-libxml2
    sudo apt-get install python-libxslt1
    sudo apt-get install python-pylons
    sudo apt-get install python-rdflib
    sudo apt-get install python-dateutil

    sudo easy_install pairtree==0.5.6-T
    sudo easy_install repoze.who==2.0a4
    sudo easy_install repoze.who_friendlyform
    sudo easy_install solrpy

    Installing profilers in python and pylons to obtain run time performance and other stats
    Note: This package is OPTIONAL and is only needed in development machines. 
          See the note below about running Pylons in debug mode (section B)
    sudo apt-get install python-profiler
    sudo easy_install repoze.profile

    Installing solr - tomcat    
    sudo apt-get install solr-tomcat
        This will install Solr from Ubuntu's repositories as well as install and configure Tomcat. 
        Tomcat is installed with CATALINA_HOME in /usr/share/tomcat6 and CATALINA_BASE in /var/lib/tomcat6, 
        following the rules from /usr/share/doc/tomcat6-common/RUNNING.txt.gz. 
        The Catalaina configuration files are in /etc/tomcat6/ 
        
        Solr itself lives in three spots, /usr/share/solr, /var/lib/solr/ and /etc/solr. 
        These directories contain the solr home director, data directory and configuration data respectively.
        
        You can visit the url http://localhost:8080 and http://localhost:8080/solr to make sure Tomcat and SOLR are working fine
    
   Installing VMWare tools
   Select Install Vmware tools from the VMWare console 
    sudo mkdir /mnt/cdrom
    sudo mount /dev/cdrom /mnt/cdrom
    cd tmp
    cd /tmp
    ls -l
    tar zxpf /mnt/cdrom/VMwareTools-7.7.6-203138.tar.gz vmware-tools-distrib/
    ls -l
    sudo umount /dev/cdrom
    sudo apt-get install linux-headers-virtual
    sudo apt-get install psmisc
    cd vmware-tools-distrib/
    sudo ./vmware-install.pl
Accept all of the default options

Installing Redis (http://redis.io/)
    sudo apt-get install redis-server
        The data directory is at /var/lib/redis and the configuration is at /etc/redis
        This installed version 2:1.2.0-1
        This is actually version 1.2.0-1 of redis whihc is very old. If on Lucid, download the debian package from Oneiric
           sudo apt-get remove --purge redis-server
           cd ~
           wget http://ubuntu.intergenia.de/ubuntu//pool/universe/r/redis/redis-server_2.2.11-3_amd64.deb
           sudo dpkg -i redis-server_2.2.11-3_amd64.deb

Installing the python redis client
    Get the latest version of the python-redis client from oneiric
    wget http://de.archive.ubuntu.com/ubuntu/pool/universe/p/python-redis/python-redis_2.4.5-1_all.deb
    sudo dpkg -i python-redis_2.4.5-1_all.deb
        I initially did sudo apt-get install python-redis. 
        This installed verison 0.6.1, which is the latest version available for Lucid amd64 architecture is 0.6.1, 
        so I removed the package using apt-get remove --purge python-redis
        I then downloaded the latest debian package from Oneiric amd64 using wget and installed it using dpkg
        I did have a look at the backports but from what I saw, the necessary package isn't in there 

Installing supervisor - to manage the message workers
    sudo apt-get install supervisor
        
Pulling Recordsilo and Databank from github
    Recordsilo is available at https://github.com/anusharanganathan/RecordSilo 
    RDFDatabank is available at https://github.com/anusharanganathan/RDFDatabank
    Recordsilo and RDFDatabank and kept in sync so at any period of time the latest egg file in 
    Recordsilo/dist (https://github.com/anusharanganathan/RecordSilo/tree/master/dist) is comaptible with the code in the master branch of RDFDatabank 
    
    sudo apt-get install git-core git-doc
    sudo mkdir ~/git-src
    cd git-src
    If you want to clone the repository (to be able to commit changes), 
        setup git following the instructions in http://help.github.com/linux-set-up-git/

    Clone/Pull Recordsilo and install the latest vesion. Currently the latest version is 0.4.14. 
    
    git clone git://github.com/anusharanganathan/RecordSilo.git
    cd RecordSilo/dist
    sudo easy_install RecordSilo-0.4.14-py2.x.egg (2.x - depending on whether you are running python 2.6 / python 2.7)  

    Clone/Pull RDFDatabank
    cd /opt
    sudo mkdir RDFDatabank
    sudo chown www-data:demoSystemUser RDFDatabank/
    sudo chmod 775 RDFDatabank/ 
    git clone git://github.com/dataflow/RDFDatabank.git RDFDatabank/
    
    /opt/RDFDatabank is the root directory running the databank instance. You can move this to any other place of your choice.

------------------------------------------------------------------------------------------------------
III. Customizing Databank to your environment
------------------------------------------------------------------------------------------------------
Configure your Pylons environment - edit the production.ini file
In the file production.ini, edit the folllowing:
    email_to = your_email_address    
        #Paster uses this to send you error messages 
    
    who.log_file = /var/log/databank/who.log 
        #You can change this if you want your log files stored in another location. 
        #If running Databank using Apache, user "www-data" will need to be able to read and write to this directory    
        
    granary.store = /silos  
        #This is root directory where all of the data in Databank is going to be held.
        #You can change this to a location of your choice. 
        #If you are leaving at /silos, Please create a directory under root called silos and www-data needs to be able to read and write to it
        cd /
        sudo mkdir silos
        sudo chown www-data:demoSystemUser /silos
        sudo chmod 775 /silos 
    
    granary.uri_root = http://databank.ora.ox.ac.uk/  
        #Change the domain name to yours    
        
    solr.host = http://localhost:8080/solr 
        #If you have installed Solr with tomcat (as detailed above), then change the url to http://localhost:8080/solr.
        #If you have SOLR running with Jetty, you would need to change the port to 8983

    Change the default values of publisher, rights and license. these are treated as text strings and are currently used in the manifest.rdf. 
    The license and rights information can be overwritten 

------------------------------------------------------------------------------------------------------
IV. Create the main admin user to access Databank

TODO: This section uses htpasswd and a python file to manage user groups and roles.
      This would best be replaced by a DB lookup or similar.
------------------------------------------------------------------------------------------------------     
1. Create a file 'passwd' in the root directory of RDFDatabank using 'htpasswd' and add a user to the passwd file.
   OR copy the file passwd-default to passwd

   The passwd-default file has users whose username, password and roles are as given in the file rdfdatabank/tests/userRolesForTesting.txt.  
   These user accounts are just for demonstration and would have to be changed for a production instance.

   To create a new pssswd file with the username 'admin'.
   Note: To start off you just need to create this one username and password. This user will be the main databank administrator.
      cd RDFDatabank/
      htpasswd -c passwd admin

      [enter admin password]   

2. Create and add data to the file rdfdatabank/config/users.py.
   OR copy the file rdfdatabank/config/users-default.py to rdfdatabank/config/users-.py.
   
   Currently, you need to create a file called 'users.py' in rdfdatabank/config/ and populate the file with the data for each of the users you had added into the passwd file.
   You just need to define the user for the main admin account user ('admin' - added earlier into htpasswd). You can create further users using the Databank web interface.

   Alternatively, you can copy the file rdfdatabank/config/users-default.py to rdfdatabank/config/users.py     
    
If creating the users.py file:
    The data to add should look like this
#-*- coding: utf-8 -*-
_USERS = {
    'username': {
        'owner': '*', 
        'first_name': 'Your first name', 
        'last_name': 'Your last name', 
        'role': 'admin'
    }
}

    Replace 'username' with the username you used when adding a user using htpasswd
    Replace 'Your first name' with your first name
    Replace 'Your last name' with your last name

    The key 'owner' should contain the names of all the silos the user has access to separated by a comma, 
    or '*' indicating the user has access to all silos
    
    Examples for owner:
        'owner': '*',
        'owner': 'my_first_silo,sandbox,my_second_silo', 

------------------------------------------------------------------------------------------------------
V. Integrate Databank with Datacite, for minting DOIs (this section is optional)
------------------------------------------------------------------------------------------------------
If you want to integrate Databank with Datacite for minting DOIs for each of the data-packages, then you would need to do the following:

Create a file called doi_config.py which has all of the authentication information given to you by Datacite. Copy the lines below and 
edit the values for each of the fields in "#Details pertaining to account with datacite" and "#Datacite api endpoint" if it is different

#-*- coding: utf-8 -*-
from pylons import config

class OxDataciteDoi():
    def __init__(self):
        """
            DOI service provided by the British Library on behalf of Datacite.org
            API Doc: https://api.datacite.org/
            Metadata requirements: http://datacite.org/schema/DataCite-MetadataKernel_v2.0.pdf
        """
        #Details pertaining to account with datacite
        self.account = "BL.xxxx"
        self.description = "Oxford University Library Service Databank"
        self.contact = "Contact Name of person in your organisation"
        self.email = "email of contact person in your organisation"
        self.password = "password as given by DataCite"
        self.domain = "ox.ac.uk"
        self.prefix = "the prefix as gcen by DataCite"
        self.quota = 500

        if config.has_key("doi.count"):
            self.doi_count_file = config['doi.count']

        #Datacite api endpoint
        self.endpoint_host = "api.datacite.org"
        self.endpoint_path_doi = "/doi"
        self.endpoint_path_metadata = "/metadata"

------------------------------------------------------------------------------------------------------
VI. Integrate Pylons with Apache
------------------------------------------------------------------------------------------------------
1. Edit the file dispatch.wsgi 
    Note: you only need to do this step if the root directory running the databank instance is not /opt/RDFDatabank)
    In the mod_wsgi/dispatch.wsgi file, edit the location of your databank instance. 
    Replace the string '/opt/RDFDatabank' with the complete path to the directory where you have installed Databank. 

2. Add a new site in apache sites-available called databank-wsgi

   There is a file provided to you in the docs dir called databank_wsgi (/opt/RDFDatabank/docs/apache_config/databank_wsgi).
        If the root directory running the databank instance is not /opt/RDFDatabank, edit the location of your databank instance,
        replacing the string '/opt/RDFDatabank' with the complete path to the directory where you have installed Databank.
   
       The apache log files are configured to be stored in  /var/log/apache2/. Agaian you can change this location.
       
        Copy the file docs/apache_config/databank_wsgi to /etc/apache/sites-available. 
        $sudo cp /opt/RDFDatabank/docs/apache_config/databank_wsgi /etc/apache2/sites-available/

3. Enable mod_wsgi and the site databank_wsgi. If the site default is enabled, disable that site.
    a2dissite 000-default
    sudo a2enmod wsgi
    sudo a2ensite databank_wsgi
    
------------------------------------------------------------------------------------------------------
VII. Setup SOLR
------------------------------------------------------------------------------------------------------
Copy the solr schema file from docs into your solr conf
    sudo /etc/init.d/tomcat6 stop
    sudo cp /opt/RDFDatabank/docs/solr_config/conf/schema.xml /etc/solr/conf/
    sudo /etc/init.d/tomcat6 start

------------------------------------------------------------------------------------------------------
VIII. Setup Supervisor
------------------------------------------------------------------------------------------------------
Items are indexed in SOLR from Databank, through redis using message queues
The workers that run on these message queues are managed using supervisor

    The related files are available in /opt/RDFDatabank/message_workers

    Modify the file loglines.cfg - if the solr end point is not  http://localhost:8080/solr or databank root is not /opt/RDFDatabank
        [worker_solr]
        solrurl = http://localhost:8080/solr
        dbroot = /opt/RDFDatabank

    Modify the file workers_available/worker_broker.conf - if databank root is not /opt/RDFDatabank
        [program:worker_broker]
        directory = /opt/RDFDatabank/message_workers/
        command = /opt/RDFDatabank/message_workers/broker.py %(process_num)s
        stdout_logfile = /var/log/databank/broker.log

    Modify the file workers_available/worker_solr.conf - if databank root is not /opt/RDFDatabank
        [program:worker_solr]
        directory = /opt/RDFDatabank/message_workers/
        command = /opt/RDFDatabank/message_workers/solr_worker.py %(process_num)s
        stdout_logfile = /var/log/databank/solr_worker.log

    Stop supervisor, copy the following files to /etc/supervisor/conf.d/ and start supervisor
        $ sudo /etc/init.d/supervisor stop
        $ sudo cp workers_available/worker_broker.conf /etc/supervisor/conf.d/
        $ sudo cp workers_available/worker_solr.conf /etc/supervisor/conf.d
        $ sudo /etc/init.d/supervisor start

    The controller for supervisor can be invoked with the command 'supervisorctl'
        sudo supervisorctl
        
        This will list all of the jobs manged by supervisor and their current status.
        You can start / stop / restart jobs from withon the controller.
        For more info on supervisor, read http://supervisord.org/index.html

------------------------------------------------------------------------------------------------------
IX. Making sure all of the needed folders are available and apache has access to all the needed parts
------------------------------------------------------------------------------------------------------
Apache runs as user www-data. Make sure the user www-data is able to read write to the following locations
    /opt/RDFDatabank
    /silos (create if not available)
    /var/log/databank (create if not available)
    
Change permission, so www-data has access to RDFDatabank
    sudo chown -R www-data:demoSystemUser /opt/RDFDatabank/
    sudo chmod -R 775 /opt/RDFDatabank/

Create a folder called /silos and change it's owner and permission. This is where the silos are going to be stored
    sudo mkdir /silos
    sudo chown -R www-data:demoSystemUser /silos
    sudo chmod -R 775 /silos

Create a folder called databank in /var/log/databank and change it's owner and permission
    sudo mkdir /var/log/databank
    sudo chown -R www-data:demoSystemUser /var/log/databank
    sudo chmod -R 775 /var/log/databank

------------------------------------------------------------------------------------------------------
X. Test your Pylons installation 
------------------------------------------------------------------------------------------------------
Restart apache
  sudo /etc/init.d/apache2 restart
  
Visit the page http://localhost/
  
If you see an error message look at the logs at /var/log/apache2/databank-error.log
  
If you have problems with authorization, you can change the who.log_level to debug in the production.ini file 
and restart apache so you can check the logs to see what's happening. The who.log_file is available at /var/log/databank/who.log

------------------------------------------------------------------------------------------------------
XI. Run the test code and make sure all the tests pass
------------------------------------------------------------------------------------------------------
The test code is located at /opt/RDFDatabank/rdfdatabank/tests

There are two test files - TestSubmission.py and TestSubmission_submitter.py
    TestSubmission.py test all of the different functionality
    TestSubmission_submitter.py tests the different user roles and permissions

Both of these tests use the configuration file RDFDatabankConfig.py, which you may need to modify
    granary_uri_root="http://databank"
        This needs to be the same value as granary.uri_root in the production.ini file (or development.ini file if usign that instead)
    endpointhost="localhost"
        This should point to the url where the databank instance is running. 
        If it is running on http://localhost/, it should be localhost. If it is running on http://example.org it should be example.org.
        if it is running on a non-standard port like port 5000 at http://localhost:5000, this would be localhost:5000
    endpointpath="/test/" and endpointpath2="/test2/"
        The silos that are going to be used for testing. Currently only the silo defined in endpointpath is used. 
        The silos will be created by the test if they don't exist.
    The rest of the file lists the credentials of the different users used for testing

To run the tests
    Make sure databank is running (see section IX)
    cd /opt/RDFDatabank/rdfdatabank/tests
    python TestSubmission.py              (to run the tests in TestSubmission.py)
    python TestSubmission_submitter.py    (to run the tests in TestSubmission_submitter.py)

-----------------------------------------------------------------------------------------------------  
B. Running Pylons from the command line in debug mode and dumping logs to stdout
-----------------------------------------------------------------------------------------------------
If you would like to run Pylons in debug mode from the command line and dump all of the log messages to stdout, stop apache and start paster from the command line.

Open the file development.ini and make the changes as in section III (except may be who.log_file). 
Note: development.ini is similar to and essentially a copy of production.ini, except in the configuration of logs and debug levels.

    To run pylons in debug mode, set 'debug' to 'true' in the '[DEFAULT]' section
        [DEFAULT]
        debug = true
    If you run pylons in debug mode, the error stack will be displayed on the browser with the state variables and their values. 
    This is useful for debugging. It is not advisable to have this set to true in production machines. 
    Also, the pylons profiler (repoze.profile) is configured to run in debug mode. Make sure the packages python-profiler, repoze.profile are installed.
    The lines profile.log_filename has the log file for the profiler and the line profile.path has the end point. Point your browser to http://localhost/__profile__ to see the stats and control them
        profile.log_filename = /var/log/databank/profile.log
        profile.path = /__profile__


    To set the who.log_file to stdout, the line would read as below
        who.log_file = stdout
    To set the who.log_level to debug, so you can get more information if you want to debug authorization / authentication
        who.log_level = debug

    if you would like to run paster on port 80, make sure host and port are set as follows
        host = 0.0.0.0
        port = 80
    If you don't mind running on port 5000 (or any other port that does not require super user privilidges), the host and port settings will be as below
        host = 127.0.0.1
        port = 5000

    The configuration of the logs can be modified so it's all printed to stdout and the log level is debug. 
    For example the following configuration will write all logs to stdout
        [loggers]
        keys = root, routes, rdfdatabank

        [handlers]
        keys = console

        [formatters]
        keys = generic

        [logger_root]
        level = DEBUG
        handlers = console

        [logger_routes]
        level = DEBUG
        handlers = console
        qualname = routes.middleware

        [logger_rdfdatabank]
        level = DEBUG
        handlers = console
        qualname = rdfdatabank

        [handler_console]
        class = StreamHandler
        args = (sys.stderr,)
        level = NOTSET
        formatter = generic

        [formatter_generic]
        format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
        datefmt = %H:%M:%S
        
Make sure the user running paster has access to all the directories. 
If running Pylons on port 80, 
    you are now most likely not running as user 'www-data' and so would have to revisit section VIII and 
    change permissions giving the super user running paster access to the different directories.
If running on any other port,
    You could just run pylons as the demoSystemUser
    
The commands to run pylons from the command line
    sudo /etc/init.d/apache2 stop
    sudo paster serve development.ini
    
-----------------------------------------------------------------------------------------------------
